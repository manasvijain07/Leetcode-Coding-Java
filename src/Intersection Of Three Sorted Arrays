Given three arrays sorted in the ascending order, return their intersection sorted array in the ascending order.

Example One
{
"arr1": [2, 5, 10],
"arr2": [2, 3, 4, 10],
"arr3": [2, 4, 10]
}
Output:

[2, 10]
Example Two
{
"arr1": [1, 2, 3],
"arr2": [],
"arr3": [2, 2]
}
Output:

[-1]
Example Three
{
"arr1": [1, 2, 2, 2, 9],
"arr2": [1, 1, 2, 2],
"arr3": [1, 1, 1, 2, 2, 2]
}
Output:

[1, 2, 2]
Notes
If the intersection is empty, return an array with one element -1.
Constraints:

0 <= length of each given array <= 105
0 <= any value in a given array <= 2 * 106

--------------------------------------

Sol 1 - using 2 pointers
TC - O(n)
SC - O(n)

    static ArrayList<Integer> find_intersection(ArrayList<Integer> arr1, ArrayList<Integer> arr2, ArrayList<Integer> arr3) {
        // Write your code here.
        if(arr1 == null || arr2 == null || arr3 == null)
        {
            return new ArrayList(Arrays.asList(-1));
        }
        ArrayList<Integer> intersectedList = findIntersection(arr1, arr2);
        System.out.println("here = " +intersectedList.size());
        ArrayList<Integer> res = findIntersection(intersectedList, arr3);
        
        return res.isEmpty() ? new ArrayList(Arrays.asList(-1)) : res;
    }
    
    static ArrayList<Integer> findIntersection(List<Integer> arr1, List<Integer> arr2)
    {
        ArrayList<Integer> res = new ArrayList();
        
        int i = 0, j = 0;
        
        while(i < arr1.size() && j < arr2.size())
        {
            if(arr1.get(i).equals(arr2.get(j)))
            {
                res.add(arr1.get(i));
                i++;
                j++;
            }
            else if(arr1.get(i) < arr2.get(j))
            {
                i++;
            }
            else
            {
                j++;
            }
        }
        return res;
    }
--------------------------------------

Sol 2 - using 3 pointers
TC - O(n)
SC - O(n)

    static ArrayList<Integer> find_intersection(ArrayList<Integer> arr1, ArrayList<Integer> arr2, ArrayList<Integer> arr3) {
        // Write your code here.
        if(arr1 == null || arr2 == null || arr3 == null)
        {
            return new ArrayList(Arrays.asList(-1));
        }
        ArrayList<Integer> res = new ArrayList<>();
        
        int i = 0, j = 0, k = 0;
        
        while(i < arr1.size() && j < arr2.size() && k < arr3.size())
        {
            if(arr1.get(i).equals(arr2.get(j)) && arr2.get(j).equals(arr3.get(k)))
            {
                res.add(arr1.get(i));
                i++;
                j++;
                k++;
            }
            if(i >= arr1.size() || j >= arr2.size() || k >= arr3.size())
            {
                break;
            }
            while(arr1.get(i) < arr2.get(j) || arr1.get(i) < arr3.get(k))
            {
                i++;
                if(i >= arr1.size())
                {
                    return res.isEmpty() ? new ArrayList(Arrays.asList(-1)) : res;
                }
            }
            while(arr2.get(j) < arr1.get(i) || arr2.get(j) < arr3.get(k))
            {
                j++;
                if(j >= arr2.size())
                {
                    return res.isEmpty() ? new ArrayList(Arrays.asList(-1)) : res;
                }
            }
            while(arr3.get(k) < arr1.get(i) || arr3.get(k) < arr2.get(j))
            {
                k++;
                if(k >= arr3.size())
                {
                    return res.isEmpty() ? new ArrayList(Arrays.asList(-1)) : res;
                }
            }
        }
        return res.isEmpty() ? new ArrayList(Arrays.asList(-1)) : res;
    }

