We can shift a string by shifting each of its letters to its successive letter.

For example, "abc" can be shifted to be "bcd".
We can keep shifting the string to form a sequence.

For example, we can keep shifting "abc" to form the sequence: "abc" -> "bcd" -> ... -> "xyz".
Given an array of strings strings, group all strings[i] that belong to the same shifting sequence. You may return the answer in any order.

 

Example 1:

Input: strings = ["abc","bcd","acef","xyz","az","ba","a","z"]
Output: [["acef"],["a","z"],["abc","bcd","xyz"],["az","ba"]]
Example 2:

Input: strings = ["a"]
Output: [["a"]]
 

Constraints:

1 <= strings.length <= 200
1 <= strings[i].length <= 50
strings[i] consists of lowercase English letters.


--------------------------------------

Solution 1 - 
TC - O(m * n)
SC - O(m * n)

class Solution {
    public List<List<String>> groupStrings(String[] strings) {
        int n = strings.length;
        
        if(strings == null || n == 0)
        return null;
        List<List<String>> result = new ArrayList<>();
        HashMap<String, List<String>> map = new HashMap<>();
        StringBuffer keyS = new StringBuffer();
        for(String s : strings)
        {
            if(s.length() == 1)
            {
               keyS = new StringBuffer("o"); 
            }
            else
            {
                keyS = getDiff(s);
            }
            String key = keyS.toString();
            if(!map.containsKey(key))
            {
                    map.put(key, new ArrayList<>());
            }
            List<String> temp = map.get(key);
            temp.add(s);
            map.put(key, temp);
        }
        for(String key : map.keySet())
        {
            result.add(map.get(key));
        }
        return result;
    }

    public StringBuffer getDiff(String s)
    {
        StringBuffer res = new StringBuffer();
        for(int i = 1; i < s.length(); i++)
        {
            int diff = s.charAt(i) - s.charAt(i - 1);
            if(diff < 0)
            {
                diff = diff + 26;
            }
            res.append(Integer.toString(diff) + ",");
        }
        return res;
    }
}