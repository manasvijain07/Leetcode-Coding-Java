Given a list of numbers, the task is to insert these numbers into a stream and find the median of the stream after each insertion. If the median is a non-integer, consider itâ€™s floor value.

The median of a sorted array is defined as the middle element when the number of elements is odd and the mean of the middle two elements when the number of elements is even.

Example
{
"stream": [3, 8, 5, 2]
}
Output:

[3, 5, 5, 4]
Iteration	Stream	Sorted Stream	Median
1	[3]	[3]	3
2	[3, 8]	[3, 8]	(3 + 8) / 2 => 5
3	[3, 8, 5]	[3, 5, 8]	5
4	[3, 8, 5, 2]	[2, 3, 5, 8]	(3 + 5) / 2 => 4
Notes
Constraints:

1 <= length of stream <= 105
1 <= any value in the stream <= 105
The stream can contain duplicates.

-----------------------------------------

Sol 1 - Brute force 
Tc - n ^ 2 log n
Sc - O(n)


    static ArrayList<Integer> online_median(ArrayList<Integer> stream) {
        ArrayList<Integer> res = new ArrayList<>();
        
        for(int i = 0; i < stream.size(); i++)
        {
            if(i == 0)
            {
                res.add(stream.get(0));
            }
            else if(i == 1)
            {
                int val = (stream.get(0) + stream.get(1))/2;
                res.add(val);
            }
            else
            {
                Collections.sort(stream.subList(0, i + 1));
                
                System.out.println(i);
                if((i + 1) % 2 == 0)
                {
                    
                    int val = (stream.get((i + 1)/2) + stream.get((i + 1)/2 - 1))/2;
                    res.add(val);
                }
                else
                {
                    res.add(stream.get((i + 1)/2));
                }
            }
        }
        return res;
    }
