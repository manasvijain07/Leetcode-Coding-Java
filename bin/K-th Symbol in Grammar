We build a table of n rows (1-indexed). We start by writing 0 in the 1st row. Now in every subsequent row, we look at the previous row and replace each occurrence of 0 with 01, and each occurrence of 1 with 10.

For example, for n = 3, the 1st row is 0, the 2nd row is 01, and the 3rd row is 0110.
Given two integer n and k, return the kth (1-indexed) symbol in the nth row of a table of n rows.

 

Example 1:

Input: n = 1, k = 1
Output: 0
Explanation: row 1: 0
Example 2:

Input: n = 2, k = 1
Output: 0
Explanation: 
row 1: 0
row 2: 01
Example 3:

Input: n = 2, k = 2
Output: 1
Explanation: 
row 1: 0
row 2: 01
 

Constraints:

1 <= n <= 30
1 <= k <= 2n - 1

-------------------------------------------------

Solution - 

Intuition
The intuition lies solely in the observation part. Here for any now the first half is exactly equal to previous one and 2nd 
half part is the complement of the first half. So we can recursively search the value in each half depending on the value of k 
either lies in first half or 2nd half.

n = 1 : 0
n = 2 : 0 1
n = 3 : 0 1 1 0
n = 4 : 0 1 1 0 1 0 0 1

Approach
Base Case: given in question

first we calculate the length of the row and checks where k lies in the first half or second half. For first half we can call 
by simply passing the previous row (n-1). But for second half we need to adjust k as k - midValue. Sice second half is complement 
of first half we take the complemented value.

class Solution {
    public int kthGrammar(int n, int k) {
        if(n == 1 && k == 1)
            return 0;
        
        int mid = (int)Math.pow(2, (n - 1))/2;
        
        if(k <= mid)
        {
            return kthGrammar(n - 1, k);
        }
        else
        {
            return kthGrammar(n - 1, k - mid) == 1 ? 0 : 1;
        }
    }
}

TC - O(n)
SC - O(n)
